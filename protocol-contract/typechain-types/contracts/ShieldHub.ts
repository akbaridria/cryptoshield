/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Types {
  export type OrderStruct = {
    isExist: boolean;
    policyHolder: AddressLike;
    amount: BigNumberish;
    iType: BigNumberish;
    market: string;
    price: BigNumberish;
    strikePrice: BigNumberish;
    expireTime: BigNumberish;
    coverAmount: BigNumberish;
    status: BigNumberish;
    orderNumber: BigNumberish;
  };

  export type OrderStructOutput = [
    isExist: boolean,
    policyHolder: string,
    amount: bigint,
    iType: bigint,
    market: string,
    price: bigint,
    strikePrice: bigint,
    expireTime: bigint,
    coverAmount: bigint,
    status: bigint,
    orderNumber: bigint
  ] & {
    isExist: boolean;
    policyHolder: string;
    amount: bigint;
    iType: bigint;
    market: string;
    price: bigint;
    strikePrice: bigint;
    expireTime: bigint;
    coverAmount: bigint;
    status: bigint;
    orderNumber: bigint;
  };
}

export interface ShieldHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMarket"
      | "buyInsurance"
      | "calculateCoverAmount"
      | "checkPrice"
      | "getLimitCover"
      | "getOrderByNumber"
      | "getUserFullInfo"
      | "marketAddress"
      | "orderNumbers"
      | "orderTracker"
      | "owner"
      | "redeemInsurace"
      | "removeMarket"
      | "renounceOwnership"
      | "totalClaimed"
      | "totalCurrentPremium"
      | "totalUnrealizedCoverAmount"
      | "transferOwnership"
      | "userOrders"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Claimed" | "OrderCreated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMarket",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInsurance",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCoverAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "checkPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getLimitCover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderByNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFullInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderNumbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemInsurace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCurrentPremium",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnrealizedCoverAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCoverAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLimitCover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderByNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFullInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemInsurace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCurrentPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnrealizedCoverAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    policyHolder: AddressLike,
    iType: BigNumberish,
    market: string,
    amountCover: BigNumberish
  ];
  export type OutputTuple = [
    policyHolder: string,
    iType: bigint,
    market: string,
    amountCover: bigint
  ];
  export interface OutputObject {
    policyHolder: string;
    iType: bigint;
    market: string;
    amountCover: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    policyHolder: AddressLike,
    iType: BigNumberish,
    market: string,
    amountPremium: BigNumberish
  ];
  export type OutputTuple = [
    policyHolder: string,
    iType: bigint,
    market: string,
    amountPremium: bigint
  ];
  export interface OutputObject {
    policyHolder: string;
    iType: bigint;
    market: string;
    amountPremium: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShieldHub extends BaseContract {
  connect(runner?: ContractRunner | null): ShieldHub;
  waitForDeployment(): Promise<this>;

  interface: ShieldHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMarket: TypedContractMethod<
    [key: string, source: AddressLike],
    [void],
    "nonpayable"
  >;

  buyInsurance: TypedContractMethod<
    [
      market: string,
      premium: BigNumberish,
      iType: BigNumberish,
      strikePrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calculateCoverAmount: TypedContractMethod<
    [
      premium: BigNumberish,
      strikePrice: BigNumberish,
      currentPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;

  checkPrice: TypedContractMethod<[market: string], [bigint], "view">;

  getLimitCover: TypedContractMethod<[], [bigint], "view">;

  getOrderByNumber: TypedContractMethod<
    [number: BigNumberish],
    [Types.OrderStructOutput],
    "view"
  >;

  getUserFullInfo: TypedContractMethod<
    [user: AddressLike],
    [Types.OrderStructOutput[]],
    "view"
  >;

  marketAddress: TypedContractMethod<[arg0: string], [string], "view">;

  orderNumbers: TypedContractMethod<[], [bigint], "view">;

  orderTracker: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        isExist: boolean;
        policyHolder: string;
        amount: bigint;
        iType: bigint;
        market: string;
        price: bigint;
        strikePrice: bigint;
        expireTime: bigint;
        coverAmount: bigint;
        status: bigint;
        orderNumber: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  redeemInsurace: TypedContractMethod<
    [orderNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeMarket: TypedContractMethod<[key: string], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalCurrentPremium: TypedContractMethod<[], [bigint], "view">;

  totalUnrealizedCoverAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMarket"
  ): TypedContractMethod<
    [key: string, source: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyInsurance"
  ): TypedContractMethod<
    [
      market: string,
      premium: BigNumberish,
      iType: BigNumberish,
      strikePrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateCoverAmount"
  ): TypedContractMethod<
    [
      premium: BigNumberish,
      strikePrice: BigNumberish,
      currentPrice: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkPrice"
  ): TypedContractMethod<[market: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLimitCover"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrderByNumber"
  ): TypedContractMethod<
    [number: BigNumberish],
    [Types.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserFullInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [Types.OrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "orderNumbers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orderTracker"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        isExist: boolean;
        policyHolder: string;
        amount: bigint;
        iType: bigint;
        market: string;
        price: bigint;
        strikePrice: bigint;
        expireTime: bigint;
        coverAmount: bigint;
        status: bigint;
        orderNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemInsurace"
  ): TypedContractMethod<[orderNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMarket"
  ): TypedContractMethod<[key: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCurrentPremium"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUnrealizedCoverAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint8,string,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "OrderCreated(address,uint8,string,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
